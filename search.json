[{"path":[]},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glyparse/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glyparse/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glyparse","title":"Contributing to glyparse","text":"outlines propose change glyparse. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glyparse/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glyparse","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glyparse/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glyparse","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glyparse/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glyparse","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glyparse\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glyparse/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glyparse","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glyparse/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glyparse","text":"Please note glyparse project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glyparse/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 glyparse authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glyparse/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glyparse","title":"Getting help with glyparse","text":"Thanks using glyparse! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glyparse/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glyparse","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glyparse/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glyparse","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glyparse/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glyparse","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"your-universal-glycan-text-translator","dir":"Articles","previous_headings":"","what":"Your Universal Glycan Text Translator 🔄","title":"Getting Started with glyparse","text":"Welcome world glycan text parsing! ’ve ever worked glycan data different sources, know frustration: every database, software tool, research group seems way representing glycan structures text format. ’s glyparse comes rescue! 🚀 Think glyparse universal glycan translator — can read glycan structures written many different “languages” convert unified format computer can understand work . Note: functions glyparse return glyrepr::glycan_structure objects. unfamiliar glyrepr, can read documentation .","code":"library(glyparse)"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"the-babel-tower-of-glycan-text-formats","dir":"Articles","previous_headings":"","what":"The Babel Tower of Glycan Text Formats 🗼","title":"Getting Started with glyparse","text":"dive , let’s see ’re dealing . ’s N-glycan core structure written different formats: Confusing, right? 😵‍💫 glyparse understands !","code":""},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"your-parsing-toolkit","dir":"Articles","previous_headings":"","what":"Your Parsing Toolkit 🛠️","title":"Getting Started with glyparse","text":"glyparse provides seven specialized parsers, optimized specific format: parse_iupac_condensed(): common format parse_iupac_short(): Compact literature format parse_iupac_extended(): Verbose formal format parse_glycoct(): Database standard format parse_wurcs(): Modern standardized format parse_linear_code(): Linear Code format parse_pglyco_struc(): pGlyco software format parse_strucgp_struc(): StrucGP software format parsers follow pattern: Input: Character vector structure strings Output: glyrepr::glycan_structure object can analyze","code":""},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"part-0-auto_parse","dir":"Articles","previous_headings":"","what":"Part 0: auto_parse()","title":"Getting Started with glyparse","text":"Don’t know ’re dealing ? Give auto_parse()! function tries identify format automatically use appropriate parser. Even input mixed formats supported.","code":"x <- c(   \"Gal(b1-3)GalNAc(b1-\",   \"(N(F)(N(H(H(N))(H(N(H))))))\",   \"WURCS=2.0/3,3,2/[a2122h-1b_1-5][a1122h-1b_1-5][a1122h-1a_1-5]/1-2-3/a4-b1_b3-c1\" ) auto_parse(x) #> <glycan_structure[3]> #> [1] Gal(b1-3)GalNAc(b1- #> [2] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> [3] Man(a1-3)Man(b1-4)Glc(b1- #> # Unique structures: 3"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"part-1-iupac-family-the-popular-kids","dir":"Articles","previous_headings":"","what":"Part 1: IUPAC Family — The Popular Kids 🌟","title":"Getting Started with glyparse","text":"Let’s start IUPAC formats.","code":""},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"iupac-condensed-the-literature-standard","dir":"Articles","previous_headings":"Part 1: IUPAC Family — The Popular Kids 🌟","what":"IUPAC-Condensed: The Literature Standard","title":"Getting Started with glyparse","text":"format widely used scientific literature databases like UniCarbKB. Want know IUPAC-condensed format? Check !","code":"# Single structure iupac_condensed <- \"Neu5Ac(a2-3)Gal(b1-4)[Fuc(a1-3)]GlcNAc(b1-4)Gal(b1-4)Glc(a1-\" parse_iupac_condensed(iupac_condensed) #> <glycan_structure[1]> #> [1] Neu5Ac(a2-3)Gal(b1-4)[Fuc(a1-3)]GlcNAc(b1-4)Gal(b1-4)Glc(a1- #> # Unique structures: 1 # Multiple structures at once glycans <- c(   \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\",  # N-glycan core   \"Gal(b1-3)GalNAc(b1-\",                                  # O-glycan core 1   \"Neu5Ac(a2-3)Gal(b1-3)[GlcNAc(b1-6)]GalNAc(b1-\"         # O-glycan core 2 ) parse_iupac_condensed(glycans) #> <glycan_structure[3]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [2] Gal(b1-3)GalNAc(b1- #> [3] Neu5Ac(a2-3)Gal(b1-3)[GlcNAc(b1-6)]GalNAc(b1- #> # Unique structures: 3"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"iupac-short-literatures-favorite","dir":"Articles","previous_headings":"Part 1: IUPAC Family — The Popular Kids 🌟","what":"IUPAC-Short: Literature’s Favorite","title":"Getting Started with glyparse","text":"compact format popular research papers saves space: Notice much compact ! parser smart enough infer common linkage positions (like Neu5Ac always a2-linked).","code":"# The same structures in short format iupac_short <- c(   \"Mana3(Mana6)Manb4GlcNAcb4GlcNAcb-\",   \"Galb3GalNAcb-\",    \"Neu5Aca3Galb3(GlcNAcb6)GalNAcb-\" ) parse_iupac_short(iupac_short) #> <glycan_structure[3]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> [2] Gal(b1-3)GalNAc(b1- #> [3] Neu5Ac(a2-3)Gal(b1-3)[GlcNAc(b1-6)]GalNAc(b1- #> # Unique structures: 3"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"iupac-extended-the-formal-one","dir":"Articles","previous_headings":"Part 1: IUPAC Family — The Popular Kids 🌟","what":"IUPAC-Extended: The Formal One","title":"Getting Started with glyparse","text":"verbose format includes full chemical names stereochemistry:","code":"iupac_extended <- paste0(   \"α-D-Manp-(1→3)[α-D-Manp-(1→6)]-β-D-Manp-(1→4)\",   \"-β-D-GlcpNAc-(1→4)-β-D-GlcpNAc-(1→\" ) parse_iupac_extended(iupac_extended) #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> # Unique structures: 1"},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"glycoct-the-precision-format","dir":"Articles","previous_headings":"Part 2: Database Formats — The Heavy Hitters 💪","what":"GlycoCT: The Precision Format","title":"Getting Started with glyparse","text":"GlycoCT used literature precise representation databases like GlycomeDB. ’s complex extremely precise:","code":"glycoct <- paste0(   \"RES\\n\",   \"1b:b-dglc-HEX-1:5\\n\",   \"2b:b-dgal-HEX-1:5\\n\",    \"3b:a-dgal-HEX-1:5\\n\",   \"LIN\\n\",   \"1:1o(4+1)2d\\n\",   \"2:2o(3+1)3d\" ) parse_glycoct(glycoct) #> <glycan_structure[1]> #> [1] Gal(a1-3)Gal(b1-4)Glc(b1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"wurcs-the-complex-structure-format","dir":"Articles","previous_headings":"Part 2: Database Formats — The Heavy Hitters 💪","what":"WURCS: The Complex Structure Format","title":"Getting Started with glyparse","text":"WURCS (Web3 Unique Representation Carbohydrate Structures) used literature complex structures databases like GlyTouCan:","code":"wurcs <- paste0(   \"WURCS=2.0/3,3,2/\",   \"[a2122h-1b_1-5][a1122h-1b_1-5][a1122h-1a_1-5]/\",   \"1-2-3/a4-b1_b3-c1\" ) parse_wurcs(wurcs) #> <glycan_structure[1]> #> [1] Man(a1-3)Man(b1-4)Glc(b1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"linear-code-the-simplified-format","dir":"Articles","previous_headings":"Part 2: Database Formats — The Heavy Hitters 💪","what":"Linear Code: The Simplified Format","title":"Getting Started with glyparse","text":"Linear Code simplified format used literature complex structures:","code":"linear_code <- \"Ma3(Ma6)Mb4GNb4GNb\" parse_linear_code(linear_code) #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> # Unique structures: 1"},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"pglyco-format-proteomics-tool","dir":"Articles","previous_headings":"Part 3: Software-Specific Formats — The Specialists 🔬","what":"pGlyco Format: Proteomics Tool","title":"Getting Started with glyparse","text":"work glycoproteomics, might encounter pGlyco’s parenthetical notation: cryptic notation actually represents complex N-glycan: N = HexNAc F = Fuc H = Hex (Man Gal)","code":"pglyco <- \"(N(F)(N(H(H(N))(H(N(H))))))\" parse_pglyco_struc(pglyco) #> <glycan_structure[1]> #> [1] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"strucgp-format-alphabetical-system","dir":"Articles","previous_headings":"Part 3: Software-Specific Formats — The Specialists 🔬","what":"StrucGP Format: Alphabetical System","title":"Getting Started with glyparse","text":"StrucGP uses letter-based encoding system:","code":"strucgp <- \"A2B2C1D1E2F1fedD1E2edcbB5ba\" parse_strucgp_struc(strucgp) #> <glycan_structure[1]> #> [1] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/articles/glyparse.html","id":"the-bottom-line","dir":"Articles","previous_headings":"","what":"The Bottom Line 🎯","title":"Getting Started with glyparse","text":"glyparse transforms chaos glycan text formats order. matter glycan data comes , databases, literature, software tools, can now parse glyrepr::glycan_structure() analysis. fact, glyread package uses parsing functions internally reading output common glycopeptide identification softwares. Next steps: Explore glyrepr package structure manipulation Try glymotif motif analysis parsed structures Use glyexp experimental data analysis Check rest glycoverse ecosystem! Happy parsing! 🧬✨","code":""},{"path":"https://glycoverse.github.io/glyparse/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer.","code":""},{"path":"https://glycoverse.github.io/glyparse/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glyparse: Parsing glycan structure text representations. R package version 0.5.0.9000, https://glycoverse.github.io/glyparse/.","code":"@Manual{,   title = {glyparse: Parsing glycan structure text representations},   author = {Bin Fu},   year = {2025},   note = {R package version 0.5.0.9000},   url = {https://glycoverse.github.io/glyparse/}, }"},{"path":"https://glycoverse.github.io/glyparse/index.html","id":"glyparse-","dir":"","previous_headings":"","what":"Parsing glycan structure text representations","title":"Parsing glycan structure text representations","text":"Parse different glycan structure text nomenclature glyrepr::glycan_structure. Currently, following formats supported: IUPAC-extended, IUPAC-condensed, IUPAC-short, WURCS, GlycoCT, StrucGP-style, pGlyco-style.","code":""},{"path":"https://glycoverse.github.io/glyparse/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parsing glycan structure text representations","text":"can install latest release glyparse GitHub : install development version:","code":"# install.packages(\"remotes\") remotes::install_github(\"glycoverse/glyparse@*release\") remotes::install_github(\"glycoverse/glyparse\")"},{"path":"https://glycoverse.github.io/glyparse/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Parsing glycan structure text representations","text":"📚 Reference: ","code":""},{"path":"https://glycoverse.github.io/glyparse/index.html","id":"role-in-glycoverse","dir":"","previous_headings":"","what":"Role in glycoverse","title":"Parsing glycan structure text representations","text":"glyrepr natively supports parsing IUPAC-condensed format as_glycan_structure(), glycan community developed numerous nomenclature formats remain widely adopted different contexts. glyparse serves comprehensive extension glyrepr, providing robust parsing capabilities diverse formats. package can utilized directly researchers parse glycan structure text strings, integrated packages glyread seamlessly handle structure parsing processing results glycan glycopeptide analysis software.","code":""},{"path":"https://glycoverse.github.io/glyparse/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Parsing glycan structure text representations","text":"","code":"library(glyparse) # Parse a StrucGP-style structure string parse_strucgp_struc(\"A2B2C1D1E2F1fedD1E2edcbB5ba\") #> <glycan_structure[1]> #> [1] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> # Unique structures: 1 # Parse a pGlyco-style structure string parse_pglyco_struc(\"(N(F)(N(H(H(N))(H(N(H))))))\") #> <glycan_structure[1]> #> [1] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> # Unique structures: 1 # Parse a condensed IUPAC structure string parse_iupac_condensed(\"Gal(b1-3)GlcNAc(b1-4)Glc(a1-\") #> <glycan_structure[1]> #> [1] Gal(b1-3)GlcNAc(b1-4)Glc(a1- #> # Unique structures: 1 # Parse a WURCS structure string parse_wurcs(\"WURCS=2.0/3,5,4/[a2122h-1b_1-5_2*NCC/3=O][a1122h-1b_1-5][a1122h-1a_1-5]/1-1-2-3-3/a4-b1_b4-c1_c3-d1_c6-e1\") #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/auto_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic Structure Parsing — auto_parse","title":"Automatic Structure Parsing — auto_parse","text":"Detect structure string type use appropriate parser parse automatically. Mixed types supported. Supported types: GlycoCT IUPAC-condensed IUPAC-extended IUPAC-short WURCS Linear Code pGlyco StrucGP","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/auto_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic Structure Parsing — auto_parse","text":"","code":"auto_parse(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/auto_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic Structure Parsing — auto_parse","text":"x character vector structure strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/auto_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic Structure Parsing — auto_parse","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/auto_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic Structure Parsing — auto_parse","text":"","code":"# Single structure x <- \"Gal(b1-3)GlcNAc(b1-4)Glc(a1-\"  # IUPAC-condensed auto_parse(x) #> <glycan_structure[1]> #> [1] Gal(b1-3)GlcNAc(b1-4)Glc(a1- #> # Unique structures: 1  # Mixed types x <- c(   \"Gal(b1-3)GlcNAc(b1-4)Glc(a1-\",  # IUPAC-condensed   \"Neu5Aca3Gala3(Fuca6)GlcNAcb-\"  # IUPAC-short ) auto_parse(x) #> <glycan_structure[2]> #> [1] Gal(b1-3)GlcNAc(b1-4)Glc(a1- #> [2] Neu5Ac(a2-3)Gal(a1-3)[Fuc(a1-6)]GlcNAc(b1- #> # Unique structures: 2"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_glycoct.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse GlycoCT Structures — parse_glycoct","title":"Parse GlycoCT Structures — parse_glycoct","text":"function parses GlycoCT strings glyrepr::glycan_structure(). GlycoCT format used databases like GlyTouCan GlyGen.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_glycoct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse GlycoCT Structures — parse_glycoct","text":"","code":"parse_glycoct(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_glycoct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse GlycoCT Structures — parse_glycoct","text":"x character vector GlycoCT strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_glycoct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse GlycoCT Structures — parse_glycoct","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_glycoct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse GlycoCT Structures — parse_glycoct","text":"GlycoCT format consists two parts: RES: Contains monosaccharides (lines starting 'b:') substituents (lines starting 's:') LIN: Contains linkage information residues information GlycoCT format, see glycoct.md documentation.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_glycoct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse GlycoCT Structures — parse_glycoct","text":"","code":"glycoct <- paste0(   \"RES\\n\",   \"1b:a-dgal-HEX-1:5\\n\",   \"2s:n-acetyl\\n\",   \"3b:b-dgal-HEX-1:5\\n\",   \"LIN\\n\",   \"1:1d(2+1)2n\\n\",   \"2:1o(3+1)3d\" ) parse_glycoct(glycoct) #> <glycan_structure[1]> #> [1] Gal(b1-3)GalNAc(a1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_condensed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse IUPAC-condensed Structures — parse_iupac_condensed","title":"Parse IUPAC-condensed Structures — parse_iupac_condensed","text":"function parses IUPAC-condensed strings glyrepr::glycan_structure(). information IUPAC-condensed notation, see https://doi.org/10.1351/pac199668101919.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_condensed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse IUPAC-condensed Structures — parse_iupac_condensed","text":"","code":"parse_iupac_condensed(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_condensed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse IUPAC-condensed Structures — parse_iupac_condensed","text":"x character vector IUPAC-condensed strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_condensed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse IUPAC-condensed Structures — parse_iupac_condensed","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_condensed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse IUPAC-condensed Structures — parse_iupac_condensed","text":"IUPAC-condensed notation compact form IUPAC-extended notation. used GlyConnect database. contains following information: Monosaccharide name, e.g. \"Gal\", \"GlcNAc\", \"Neu5Ac\". Substituent, e.g. \"9Ac\", \"4Ac\", \"3Me\", \"?S\". Linkage, e.g. \"b1-3\", \"a1-2\", \"a1-?\". example IUPAC-condensed string \"Gal(b1-3)GlcNAc(b1-4)Glc(a1-\". reducing-end monosaccharide can without anomer information. example, two strings valid: \"Neu5Ac(a2-\" \"Neu5Ac\" first case, anomer \"a2\". second case, anomer \"?2\".","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_condensed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse IUPAC-condensed Structures — parse_iupac_condensed","text":"","code":"iupac <- \"Gal(b1-3)GlcNAc(b1-4)Glc(a1-\" parse_iupac_condensed(iupac) #> <glycan_structure[1]> #> [1] Gal(b1-3)GlcNAc(b1-4)Glc(a1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_extended.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse IUPAC-extended Structures — parse_iupac_extended","title":"Parse IUPAC-extended Structures — parse_iupac_extended","text":"Parse IUPAC-extended-style structure characters glyrepr::glycan_structure(). information IUPAC-extended format, see https://doi.org/10.1351/pac199668101919.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_extended.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse IUPAC-extended Structures — parse_iupac_extended","text":"","code":"parse_iupac_extended(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_extended.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse IUPAC-extended Structures — parse_iupac_extended","text":"x character vector IUPAC-extended strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_extended.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse IUPAC-extended Structures — parse_iupac_extended","text":"glyrepr::glycan_structure() object.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_extended.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse IUPAC-extended Structures — parse_iupac_extended","text":"","code":"iupac <- \"β-D-Galp-(1→3)[β-D-Galp-(1→4)-β-D-GlcpNAc-(1→6)]-α-D-GalpNAc-(1→\" parse_iupac_extended(iupac) #> <glycan_structure[1]> #> [1] Gal(b1-4)GlcNAc(b1-6)[Gal(b1-3)]GalNAc(a1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_short.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse IUPAC-short Structures — parse_iupac_short","title":"Parse IUPAC-short Structures — parse_iupac_short","text":"Parse IUPAC-short-style structure characters glyrepr::glycan_structure(). information IUPAC-short format, see https://doi.org/10.1351/pac199668101919.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_short.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse IUPAC-short Structures — parse_iupac_short","text":"","code":"parse_iupac_short(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_short.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse IUPAC-short Structures — parse_iupac_short","text":"x character vector IUPAC-short strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_short.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse IUPAC-short Structures — parse_iupac_short","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_short.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse IUPAC-short Structures — parse_iupac_short","text":"IUPAC-short notation compact form IUPAC-condensed notation. rarely used database, appears lot literature conciseness. Compared IUPAC-condensed notation, IUPAC-short notation ignore anomer positions, assuming known common monosaccharides. example, \"Neu5Aca3Gala-\" assumes anomer Neu5Ac C2 (a2-3 linked). Also, parentheses around linkages omitted, parentheses used indicate branching, e.g. \"Neu5Aca3Gala3(Fuca3)GlcNAcb-\". first case, anomer \"a2\". second case, anomer \"?2\".","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/reference/parse_iupac_short.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse IUPAC-short Structures — parse_iupac_short","text":"","code":"iupac <- \"Neu5Aca3Gala3(Fuca6)GlcNAcb-\" parse_iupac_short(iupac) #> <glycan_structure[1]> #> [1] Neu5Ac(a2-3)Gal(a1-3)[Fuc(a1-6)]GlcNAc(b1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_linear_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Linear Code Structures — parse_linear_code","title":"Parse Linear Code Structures — parse_linear_code","text":"Parse Linear Code structures glyrepr::glycan_structure(). know Linear Code, see article.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_linear_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Linear Code Structures — parse_linear_code","text":"","code":"parse_linear_code(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_linear_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Linear Code Structures — parse_linear_code","text":"x character vector Linear Code strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_linear_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Linear Code Structures — parse_linear_code","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_linear_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Linear Code Structures — parse_linear_code","text":"","code":"linear_code <- \"Ma3(Ma6)Mb4GNb4GNb\" parse_linear_code(linear_code) #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_pglyco_struc.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse pGlyco Structures — parse_pglyco_struc","title":"Parse pGlyco Structures — parse_pglyco_struc","text":"Parse pGlyco-style structure characters glyrepr::glycan_structure(). See example structure format.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_pglyco_struc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse pGlyco Structures — parse_pglyco_struc","text":"","code":"parse_pglyco_struc(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_pglyco_struc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse pGlyco Structures — parse_pglyco_struc","text":"x character vector pGlyco-style structure strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_pglyco_struc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse pGlyco Structures — parse_pglyco_struc","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_pglyco_struc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse pGlyco Structures — parse_pglyco_struc","text":"","code":"glycan <- parse_pglyco_struc(\"(N(F)(N(H(H(N))(H(N(H))))))\") print(glycan, verbose = TRUE) #> <glycan_structure[1]> #> [1] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_strucgp_struc.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse StrucGP Structures — parse_strucgp_struc","title":"Parse StrucGP Structures — parse_strucgp_struc","text":"Parse StrucGP-style structure characters glyrepr::glycan_structure(). See example structure format.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_strucgp_struc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse StrucGP Structures — parse_strucgp_struc","text":"","code":"parse_strucgp_struc(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_strucgp_struc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse StrucGP Structures — parse_strucgp_struc","text":"x character vector StrucGP-style structure strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_strucgp_struc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse StrucGP Structures — parse_strucgp_struc","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_strucgp_struc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse StrucGP Structures — parse_strucgp_struc","text":"","code":"glycan <- parse_strucgp_struc(\"A2B2C1D1E2F1fedD1E2edcbB5ba\") print(glycan, verbose = TRUE) #> <glycan_structure[1]> #> [1] Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> # Unique structures: 1"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_wurcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse WURCS Structures — parse_wurcs","title":"Parse WURCS Structures — parse_wurcs","text":"function parses WURCS strings glyrepr::glycan_structure(). Currently, WURCS 2.0 supported. information WURCS, see WURCS.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_wurcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse WURCS Structures — parse_wurcs","text":"","code":"parse_wurcs(x)"},{"path":"https://glycoverse.github.io/glyparse/reference/parse_wurcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse WURCS Structures — parse_wurcs","text":"x character vector WURCS strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_wurcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse WURCS Structures — parse_wurcs","text":"glyrepr::glycan_structure() object.","code":""},{"path":"https://glycoverse.github.io/glyparse/reference/parse_wurcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse WURCS Structures — parse_wurcs","text":"","code":"wurcs <- paste0(   \"WURCS=2.0/3,5,4/\",   \"[a2122h-1b_1-5_2*NCC/3=O][a1122h-1b_1-5][a1122h-1a_1-5]/\",   \"1-1-2-3-3/a4-b1_b4-c1_c3-d1_c6-e1\" ) parse_wurcs(wurcs) #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1- #> # Unique structures: 1"},{"path":[]},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glyparse 0.5.0","text":"Add parse_linear_code() parse Linear Code strings. auto_parse() now supports Linear Code strings.","code":""},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.5.0","text":"Revise documentations parsers accurate return value type.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-4-5","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.4.5","text":"Fix bug linkages like “1→3/4” parsed parse_iupac_extended(). Fix bug linkages like “b1-a3|a4” parsed parse_wurcs(). Fix bug linkages like “a3/4” parsed parse_iupac_short(). Fix bug linkages like “3:3o(3|6+1)4d” parsed parse_glycoct().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyparse 0.4.4","text":"Update dependencies depend release versions glycoverse packages.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.4.3","text":"Fix bugs introduced breaking changes glyrepr v0.7.0.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.4.2","text":"Fix incorrect structure strings vignettes.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.4.1","text":"Fix incorrect structure strings tests documentations. Remove legacy documentations.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glyparse 0.4.0","text":"parse_iupac_condensed() parse_iupac_short() now require reducing-end monosaccharide anomer information. example, “Neu5Ac(a2-” “Neu5Aca-” valid, “Neu5Ac” .","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.3.1","text":"parse_pglyco_struc() now support “aH” “pH” monosaccharides.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glyparse 0.3.0","text":"Add auto_parse() automatically detect parse different glycan structure string formats.","code":""},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.3.0","text":"Better error messages. : Now:","code":"> parse_iupac_condensed(\"bad_glycan\") Error in `purrr::map()` at glyparse/R/struc-parser-wrapper.R:13:3: ℹ In index: 1. Caused by error in `value[[3L]]()`: ! Could not parse IUPAC-condensed string: {.val {x}} ℹ Invalid characters or format in IUPAC-condensed string Run `rlang::last_trace()` to see where the error occurred. > parse_iupac_condensed(\"bad_glycan\") Error in `parse_iupac_condensed()`: ! Can't parse: \"bad_glycan\" Run `rlang::last_trace()` to see where the error occurred."},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-and-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyparse 0.2.1","text":"Update README. “Get Started” vignette added.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"major-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Major improvements","title":"glyparse 0.2.0","text":"Add parse_glycoct() parse glycans GlycoCT format.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyparse/news/index.html","id":"minor-improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"glyparse 0.1.2","text":"parse_iupac_short(), parse_iupac_extended(), parse_iupac_condensed(), parse_wurcs() now support multiple substituents monosaccharide, align updates glyrepr v0.5.0.","code":""}]
